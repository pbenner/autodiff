/* -*- mode: go; -*-
 *
 * Copyright (C) 2015-2020 Philipp Benner
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "macros.h"

#define VECTOR_JOINT3_ITERATOR_ STR_CONCAT(VECTOR_NAME, Joint3Iterator_)
#define VECTOR_JOINT_ITERATOR_  STR_CONCAT(VECTOR_NAME, JointIterator_)
#define VECTOR_JOINT3_ITERATOR  STR_CONCAT(VECTOR_NAME, Joint3Iterator)
#define VECTOR_JOINT_ITERATOR   STR_CONCAT(VECTOR_NAME, JointIterator)
#define VECTOR_CONST_ITERATOR   STR_CONCAT(VECTOR_NAME, ConstIterator)
#define VECTOR_ITERATOR         STR_CONCAT(VECTOR_NAME, Iterator)

/* -------------------------------------------------------------------------- */

package autodiff

/* -------------------------------------------------------------------------- */

import "fmt"
import "bytes"
import "bufio"
import "compress/gzip"
import "encoding/json"
import "errors"
import "io"
import "os"
import "sort"
import "strconv"
import "strings"

/* vector type declaration
 * -------------------------------------------------------------------------- */

type VECTOR_NAME struct {
  vectorSparseIndex
  values map[int]SCALAR_TYPE
  n      int
}

/* constructors
 * -------------------------------------------------------------------------- */

// Allocate a new vector. Scalars are set to the given values.
func NEW_VECTOR(indices []int, values []STORED_TYPE, n int) VECTOR_TYPE {
  if len(indices) != len(values) {
    panic("number of indices does not match number of values")
  }
  r := NIL_VECTOR(n)
  for i, k := range indices {
    if k >= n {
      panic("index larger than vector dimension")
    }
    if _, ok := r.values[k]; ok {
      panic("index appeared multiple times")
    } else {
      if values[i] != 0.0 {
        r.values[k] = NEW_SCALAR(values[i])
        r.indexInsert(k)
      }
    }
  }
  return r
}

// Allocate a new vector. All scalars are set to zero.
func NULL_VECTOR(length int) VECTOR_TYPE {
  v := NIL_VECTOR(length)
  return v
}

// Create a empty vector without allocating memory for the scalar variables.
func NIL_VECTOR(length int) VECTOR_TYPE {
  return &VECTOR_NAME{values: make(map[int]SCALAR_TYPE), n: length}
}

// Convert vector type.
func AS_VECTOR(v ConstVector) VECTOR_TYPE {
  switch v_ := v.(type) {
  case VECTOR_TYPE:
    return v_.Clone()
  }
  r := NULL_VECTOR(v.Dim())
  for it := v.ConstIterator(); it.Ok(); it.Next() {
    r.AT(it.Index()).Set(it.GetConst())
  }
  return r
}

/* cloning
 * -------------------------------------------------------------------------- */

// Create a deep copy of the vector.
func (obj VECTOR_TYPE) Clone() VECTOR_TYPE {
  r := NIL_VECTOR(obj.n)
  for i, v := range obj.values {
    r.values[i] = v.Clone()
  }
  r.vectorSparseIndex = obj.indexClone()
  return r
}

/* native vector methods
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) AT(i int) SCALAR_TYPE {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v
  } else {
    v = NULL_SCALAR()
    obj.values[i] = v
    obj.indexInsert(i)
    return v
  }
}

func (obj VECTOR_TYPE) AT_(i int) SCALAR_TYPE {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v
  } else {
    return nil
  }
}

func (obj VECTOR_TYPE) SET(x VECTOR_TYPE) {
  if obj == x {
    return
  }
  if obj.Dim() != x.Dim() {
    panic("Set(): Vector dimensions do not match!")
  }
  for it := obj.JOINT_ITERATOR_(x); it.Ok(); it.Next() {
    s1, s2 := it.GET()
    switch {
    case s1 != nil && s2 != nil: s1.SET(s2)
    case s1 != nil             : s1.SET_METHOD_NAME(0)
    default                    : obj.AT(it.Index()).SET(s2)
    }
  }
}

func (obj VECTOR_TYPE) SLICE(i, j int) VECTOR_TYPE {
  r := NIL_VECTOR(j-i)
  for it := obj.indexIteratorFrom(i); it.Ok(); it.Next() {
    if it.Get() >= j {
      break
    }
    k := it.Get()
    r.values[k-i] = obj.values[k]
    r.indexInsert(k-i)
  }
  return r
}

func (obj VECTOR_TYPE) APPEND(w VECTOR_TYPE) VECTOR_TYPE {
  r  := obj.Clone()
  r.n = obj.n + w.Dim()
  for it := w.ITERATOR(); it.Ok(); it.Next() {
    i := obj.n+it.Index()
    r.values[i] = it.GET()
    r.indexInsert(i)
  }
  return r
}

func (obj VECTOR_TYPE) STR_CONCAT(To, MATRIX_NAME)(n, m int) MATRIX_TYPE {
  if n*m != obj.n {
    panic("Matrix dimension does not fit input vector!")
  }
  v := STR_CONCAT(Null, VECTOR_NAME)(obj.n)
  for it := obj.ITERATOR(); it.Ok(); it.Next() {
    v.At(it.Index()).Set(it.GET())
  }
  matrix := MATRIX_NAME{}
  matrix.values    = v
  matrix.rows      = n
  matrix.cols      = m
  matrix.rowOffset = 0
  matrix.rowMax    = n
  matrix.colOffset = 0
  matrix.colMax    = m
  matrix.initTmp()
  return &matrix
}

/* vector interface
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) CloneVector() Vector {
  return obj.Clone()
}

func (obj VECTOR_TYPE) At(i int) Scalar {
  return obj.AT(i)
}

// Copy scalars from w into this vector. The lengths of both vectors must
// match.
func (obj VECTOR_TYPE) Set(x ConstVector) {
  if obj == x {
    return
  }
  if obj.Dim() != x.Dim() {
    panic("Set(): Vector dimensions do not match!")
  }
  for it := obj.JOINT_ITERATOR(x); it.Ok(); it.Next() {
    s1, s2 := it.Get()
    switch {
    case s1 != nil && s2 != nil: s1.Set(s2)
    case s1 != nil             : s1.SET_METHOD_NAME(0)
    default                    : obj.AT(it.Index()).Set(s2)
    }
  }
}

func (obj VECTOR_TYPE) Reset() {
  for _, v := range obj.values {
    v.Reset()
  }
}

func (obj VECTOR_TYPE) ReverseOrder() {
  n := obj.Dim()
  values := make(map[int]SCALAR_TYPE)
  index  := vectorSparseIndex{}
  for i, s := range obj.values {
    j := n-i-1
    values[j] = s
    index.indexInsert(j)
  }
  obj.values = values
  obj.vectorSparseIndex = index
}

func (obj VECTOR_TYPE) Slice(i, j int) Vector {
  return obj.SLICE(i, j)
}

func (obj VECTOR_TYPE) Swap(i, j int) {
  obj.values[i], obj.values[j] = obj.values[j], obj.values[i]
}

func (obj VECTOR_TYPE) AppendScalar(scalars ...Scalar) Vector {
  r  := obj.Clone()
  r.n = obj.n + len(scalars)
  for i, scalar := range scalars {
    switch s := scalar.(type) {
    case SCALAR_TYPE:
      r.values[obj.n+i] = s
    default:
      r.values[obj.n+i] = s.ConvertScalar(SCALAR_REFLECT_TYPE).(SCALAR_TYPE)
    }
    r.indexInsert(obj.n+i)
  }
  return r
}

func (obj VECTOR_TYPE) AppendVector(w_ Vector) Vector {
  switch w := w_.(type) {
  case VECTOR_TYPE:
    return obj.APPEND(w)
  default:
    r  := obj.Clone()
    r.n = obj.n + w.Dim()
    for it := w.Iterator(); it.Ok(); it.Next() {
      r.values[obj.n+it.Index()] = it.Get().ConvertScalar(SCALAR_REFLECT_TYPE).(SCALAR_TYPE)
      r.indexInsert(obj.n+it.Index())
    }
    return r
  }
}

func (v VECTOR_TYPE) AsMatrix(n, m int) Matrix {
  return v.STR_CONCAT(To, MATRIX_NAME)(n, m)
}

/* const interface
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) CloneConstVector() ConstVector {
  return obj.Clone()
}

func (obj VECTOR_TYPE) Dim() int {
  return obj.n
}

func (obj VECTOR_TYPE) Int8At(i int) int8 {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v.GetInt8()
  } else {
    return 0
  }
}

func (obj VECTOR_TYPE) Int16At(i int) int16 {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v.GetInt16()
  } else {
    return 0
  }
}

func (obj VECTOR_TYPE) Int32At(i int) int32 {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v.GetInt32()
  } else {
    return 0
  }
}

func (obj VECTOR_TYPE) Int64At(i int) int64 {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v.GetInt64()
  } else {
    return 0
  }
}

func (obj VECTOR_TYPE) IntAt(i int) int {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v.GetInt()
  } else {
    return 0
  }
}

func (obj VECTOR_TYPE) Float32At(i int) float32 {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v.GetFloat32()
  } else {
    return 0
  }
}

func (obj VECTOR_TYPE) Float64At(i int) float64 {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v.GetFloat64()
  } else {
    return 0
  }
}

func (obj VECTOR_TYPE) ConstAt(i int) ConstScalar {
  if i < 0 || i >= obj.Dim() {
    panic("index out of bounds")
  }
  if v, ok := obj.values[i]; ok {
    return v
  } else {
    return CONST_SCALAR_TYPE(0.0)
  }
}

func (obj VECTOR_TYPE) ConstSlice(i, j int) ConstVector {
  return obj.SLICE(i, j)
}

func (v VECTOR_TYPE) AsConstMatrix(n, m int) ConstMatrix {
  return v.STR_CONCAT(To, MATRIX_NAME)(n, m)
}

/* magic interface
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) CloneMagicVector() MagicVector {
  return obj.Clone()
}

func (obj VECTOR_TYPE) MagicAt(i int) MagicScalar {
  return obj.AT(i)
}

func (obj VECTOR_TYPE) MagicSlice(i, j int) MagicVector {
  return obj.SLICE(i, j)
}

func (obj VECTOR_TYPE) ResetDerivatives() {
  for _, v := range obj.values {
    v.ResetDerivatives()
  }
}

func (obj VECTOR_TYPE) AppendMagicScalar(scalars ...MagicScalar) MagicVector {
  r  := obj.Clone()
  r.n = obj.n + len(scalars)
  for i, scalar := range scalars {
    switch s := scalar.(type) {
    case SCALAR_TYPE:
      r.values[obj.n+i] = s
    default:
      r.values[obj.n+i] = s.ConvertMagicScalar(SCALAR_REFLECT_TYPE).(SCALAR_TYPE)
    }
    r.indexInsert(obj.n+i)
  }
  return r
}

func (obj VECTOR_TYPE) AppendMagicVector(w_ MagicVector) MagicVector {
  switch w := w_.(type) {
  case VECTOR_TYPE:
    return obj.APPEND(w)
  default:
    r  := obj.Clone()
    r.n = obj.n + w.Dim()
    for it := w.MagicIterator(); it.Ok(); it.Next() {
      r.values[obj.n+it.Index()] = it.GetMagic().ConvertMagicScalar(SCALAR_REFLECT_TYPE).(SCALAR_TYPE)
      r.indexInsert(obj.n+it.Index())
    }
    return r
  }
}

func (v VECTOR_TYPE) AsMagicMatrix(n, m int) MagicMatrix {
  return v.STR_CONCAT(To, MATRIX_NAME)(n, m)
}

/* imlement MagicScalarContainer
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) Map(f func(Scalar)) {
  for _, v := range obj.values {
    f(v)
  }
}

func (obj VECTOR_TYPE) MapSet(f func(ConstScalar) Scalar) {
  for _, v := range obj.values {
    v.Set(f(v))
  }
}

func (obj VECTOR_TYPE) Reduce(f func(Scalar, ConstScalar) Scalar, r Scalar) Scalar {
  for _, v := range obj.values {
    r = f(r, v)
  }
  return r
}

func (obj VECTOR_TYPE) ElementType() ScalarType {
  return SCALAR_REFLECT_TYPE
}

// Treat all elements as variables for automatic differentiation. This method should only be called on a single vector or matrix. If multiple vectors should be treated as variables, then a single vector must be allocated first and sliced after calling this method.
func (obj VECTOR_TYPE) Variables(order int) error {
  for i, v := range obj.values {
    if err := v.SetVariable(i, obj.n, order); err != nil {
      return err
    }
  }
  return nil
}

/* permutations
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) Permute(pi []int) error {
  if len(pi) != obj.n {
    return errors.New("Permute(): permutation vector has invalid length!")
  }
  // permute vector
  for i := 0; i < obj.n; i++ {
    if pi[i] < 0 || pi[i] >= obj.n {
      return errors.New("Permute(): invalid permutation")
    }
    if i != pi[i] && pi[i] > i {
      // permute elements
      _, ok1 := obj.values[i]
      _, ok2 := obj.values[pi[i]]
      if ok1 && ok2 {
        obj.values[pi[i]], obj.values[i] = obj.values[i], obj.values[pi[i]]
      } else
      if ok1 {
        obj.values[pi[i]] = obj.values[i]
        delete(obj.values, i)
      } else
      if ok2 {
        obj.values[i] = obj.values[pi[i]]
        delete(obj.values, pi[i])
      }
    }
  }
  obj.vectorSparseIndex = vectorSparseIndex{}
  for i := 0; i < len(pi); i++ {
    obj.indexInsert(pi[i])
  }
  return nil
}

/* sorting
 * -------------------------------------------------------------------------- */

#define SORT_TYPE STR_CONCAT(STR_CONCAT(sort, VECTOR_NAME), ByValue)

type SORT_TYPE struct {
  Value []SCALAR_TYPE
}

func (obj SORT_TYPE) Len() int {
  return len(obj.Value)
}
func (obj SORT_TYPE) Swap(i, j int) {
  obj.Value[i], obj.Value[j] = obj.Value[j], obj.Value[i]
}
func (obj SORT_TYPE) Less(i, j int) bool {
  return obj.Value[i].Smaller(obj.Value[j])
}

func (obj VECTOR_TYPE) Sort(reverse bool) {
  r := SORT_TYPE{}
  for it := obj.ITERATOR(); it.Ok(); it.Next() {
    r.Value = append(r.Value, it.GET())
  }
  ip := 0
  in := 0
  if reverse {
    in = obj.n - len(obj.values)
  } else {
    ip = obj.n - len(obj.values)
  }
  obj.values = make(map[int]SCALAR_TYPE)
  obj.vectorSparseIndex = vectorSparseIndex{}
  if reverse {
    sort.Sort(sort.Reverse(r))
  } else {
    sort.Sort(SORT_TYPE(r))
  }
  for i := 0; i < len(r.Value); i++ {
    if r.Value[i].GET_METHOD_NAME() > 0.0 {
      // copy negative values
      obj.values[i+ip] = r.Value[i]
      obj.indexInsert(i+ip)
    } else {
      // copy negative values
      obj.values[i+in] = r.Value[i]
      obj.indexInsert(i+in)
    }
  }
}

/* type conversion
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) String() string {
  var buffer bytes.Buffer

  buffer.WriteString(fmt.Sprintf("%d:[", obj.n))
  first := true
  for it := obj.ConstIterator(); it.Ok(); it.Next() {
    if !first {
      buffer.WriteString(", ")
    } else {
      first = false
    }
    buffer.WriteString(fmt.Sprintf("%d:%s", it.Index(), it.GetConst()))
  }
  buffer.WriteString("]")

  return buffer.String()
}

func (obj VECTOR_TYPE) Table() string {
  var buffer bytes.Buffer

  n := obj.Dim()

  for i := 0; i < n; i++ {
    buffer.WriteString(obj.ConstAt(i).String())
    buffer.WriteString("\n")
  }

  return buffer.String()
}

func (obj VECTOR_TYPE) Export(filename string) error {
  f, err := os.Create(filename)
  if err != nil {
    return err
  }
  defer f.Close()

  w := bufio.NewWriter(f)
  defer w.Flush()

  if _, err := fmt.Fprintf(w, "%d\n", obj.Dim()); err != nil {
    return err
  }
  for it := obj.ITERATOR(); it.Ok(); it.Next() {
    i := it.Index()
    if _, err := fmt.Fprintf(w, "%d %v\n", i, it.GET()); err != nil {
      return err
    }
  }
  return nil
}

func (obj VECTOR_TYPE) Import(filename string) error {
  values  := []STORED_TYPE{}
  indices := []int{}
  n       := 0

  var reader *bufio.Reader
  // open file
  f, err := os.Open(filename)
  if err != nil {
    return err
  }
  defer f.Close()
  isgzip, err := isGzip(filename)
  if err != nil {
    return err
  }
  // check if file is gzipped
  if isgzip {
    g, err := gzip.NewReader(f)
    if err != nil {
      return err
    }
    defer g.Close()
    reader = bufio.NewReader(g)
  } else {
    reader = bufio.NewReader(f)
  }
  // scan header
  for i_ := 1;; i_++ {
    l, err := bufioReadLine(reader)
    if err == io.EOF {
      break
    }
    if err != nil {
      return err
    }
    if len(l) == 0 {
      continue
    }
    fields := strings.Fields(l)
    if len(fields) != 1 {
      return fmt.Errorf("invalid sparse vector format")
    }
    if v, err := strconv.ParseInt(fields[0], 10, 64); err != nil {
      return err
    } else {
      n = int(v)
    }
    break
  }
  for i_ := 1;; i_++ {
    l, err := bufioReadLine(reader)
    if err == io.EOF {
      break
    }
    if err != nil {
      return err
    }
    if len(l) == 0 {
      continue
    }
    fields := strings.Fields(l)
    if len(fields) != 2 {
      return fmt.Errorf("invalid sparse vector format")
    }
    if v, err := strconv.ParseInt(fields[0], 10, 64); err != nil {
      return err
    } else {
      indices = append(indices, int(v))
    }
    if v, err := strconv.ParseFloat(fields[1], 64); err != nil {
      return err
    } else {
      values = append(values, STORED_TYPE(v))
    }
  }
  *obj = *NEW_VECTOR(indices, values, n)
  return nil
}

/* json
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) MarshalJSON() ([]byte, error) {
  k := []int{}
  v := []STORED_TYPE{}
  r := struct{
    Index  []int
    Value  []STORED_TYPE
    Length   int}{}
  for it := obj.ConstIterator(); it.Ok(); it.Next() {
    k = append(k, it.Index())
    v = append(v, it.GetConst().GET_METHOD_NAME())
  }
  r.Index  = k
  r.Value  = v
  r.Length = obj.n
  return json.MarshalIndent(r, "", "  ")
}

func (obj VECTOR_TYPE) UnmarshalJSON(data []byte) error {
  r := struct{
    Index  []int
    Value  []STORED_TYPE
    Length   int}{}
  if err := json.Unmarshal(data, &r); err != nil {
    return err
  }
  if len(r.Index) != len(r.Value) {
    return fmt.Errorf("invalid sparse vector")
  }
  *obj = *NEW_VECTOR(r.Index, r.Value, r.Length)
  return nil
}

/* iterator methods
 * -------------------------------------------------------------------------- */

func (obj VECTOR_TYPE) ConstIterator() VectorConstIterator {
  return obj.ITERATOR()
}

func (obj VECTOR_TYPE) ConstIteratorFrom(i int) VectorConstIterator {
  return obj.ITERATOR_FROM(i)
}

func (obj VECTOR_TYPE) MagicIterator() VectorMagicIterator {
  return obj.ITERATOR()
}

func (obj VECTOR_TYPE) MagicIteratorFrom(i int) VectorMagicIterator {
  return obj.ITERATOR_FROM(i)
}

func (obj VECTOR_TYPE) Iterator() VectorIterator {
  return obj.ITERATOR()
}

func (obj VECTOR_TYPE) IteratorFrom(i int) VectorIterator {
  return obj.ITERATOR_FROM(i)
}

func (obj VECTOR_TYPE) JointIterator(b ConstVector) VectorJointIterator {
  return obj.JOINT_ITERATOR(b)
}

func (obj VECTOR_TYPE) ConstJointIterator(b ConstVector) VectorConstJointIterator {
  return obj.JOINT_ITERATOR(b)
}

func (obj VECTOR_TYPE) ITERATOR() *VECTOR_ITERATOR {
  r := VECTOR_ITERATOR{obj.indexIterator(), obj}
  r.skip()
  return &r
}

func (obj VECTOR_TYPE) ITERATOR_FROM(i int) *VECTOR_ITERATOR {
  r := VECTOR_ITERATOR{obj.indexIteratorFrom(i), obj}
  r.skip()
  return &r
}

func (obj VECTOR_TYPE) JOINT_ITERATOR(b ConstVector) *VECTOR_JOINT_ITERATOR {
  r := VECTOR_JOINT_ITERATOR{obj.ITERATOR(), b.ConstIterator(), -1, nil, nil}
  r.Next()
  return &r
}

func (obj VECTOR_TYPE) JOINT3_ITERATOR(b, c ConstVector) *VECTOR_JOINT3_ITERATOR {
  r := VECTOR_JOINT3_ITERATOR{obj.ITERATOR(), b.ConstIterator(), c.ConstIterator(), -1, nil, nil, nil}
  r.Next()
  return &r
}

func (obj VECTOR_TYPE) JOINT_ITERATOR_(b VECTOR_TYPE) *VECTOR_JOINT_ITERATOR_ {
  r := VECTOR_JOINT_ITERATOR_{obj.ITERATOR(), b.ITERATOR(), -1, nil, nil}
  r.Next()
  return &r
}

func (obj VECTOR_TYPE) JOINT3_ITERATOR_(b, c VECTOR_TYPE) *VECTOR_JOINT3_ITERATOR_ {
  r := VECTOR_JOINT3_ITERATOR_{obj.ITERATOR(), b.ITERATOR(), c.ITERATOR(), -1, nil, nil, nil}
  r.Next()
  return &r
}

/* iterator
 * -------------------------------------------------------------------------- */

type VECTOR_ITERATOR struct {
  vectorSparseIndexIterator
  v VECTOR_TYPE
}

func (obj *VECTOR_ITERATOR) Get() Scalar {
  if v := obj.GET(); v == (SCALAR_TYPE)(nil) {
    return nil
  } else {
    return v
  }
}

func (obj *VECTOR_ITERATOR) GetMagic() MagicScalar {
  if v := obj.GET(); v == (SCALAR_TYPE)(nil) {
    return nil
  } else {
    return v
  }
}

func (obj *VECTOR_ITERATOR) GetConst() ConstScalar {
  if v, ok := obj.v.values[obj.Index()]; ok {
    return v
  } else {
    return nil
  }
}

func (obj *VECTOR_ITERATOR) GET() SCALAR_TYPE {
  if v, ok := obj.v.values[obj.Index()]; ok {
    return v
  } else {
    return nil
  }
}

func (obj *VECTOR_ITERATOR) Next() {
  obj.vectorSparseIndexIterator.Next()
  obj.skip()
}

func (obj *VECTOR_ITERATOR) skip() {
  for obj.Ok() && obj.GET().nullScalar() {
    i := obj.Index()
    obj.vectorSparseIndexIterator.Next()
    delete(obj.v.values, i)
    obj.v.indexDelete(i)
  }
}

func (obj *VECTOR_ITERATOR) Index() int {
  return obj.vectorSparseIndexIterator.Get()
}

func (obj *VECTOR_ITERATOR) Clone() *VECTOR_ITERATOR {
  return &VECTOR_ITERATOR{*obj.vectorSparseIndexIterator.Clone(), obj.v}
}

func (obj *VECTOR_ITERATOR) CloneConstIterator() VectorConstIterator {
  return &VECTOR_ITERATOR{*obj.vectorSparseIndexIterator.Clone(), obj.v}
}

func (obj *VECTOR_ITERATOR) CloneIterator() VectorIterator {
  return &VECTOR_ITERATOR{*obj.vectorSparseIndexIterator.Clone(), obj.v}
}

func (obj *VECTOR_ITERATOR) CloneMagicIterator() VectorMagicIterator {
  return &VECTOR_ITERATOR{*obj.vectorSparseIndexIterator.Clone(), obj.v}
}

/* joint iterator
 * -------------------------------------------------------------------------- */

type VECTOR_JOINT_ITERATOR struct {
  it1 *VECTOR_ITERATOR
  it2  VectorConstIterator
  idx  int
  s1   SCALAR_TYPE
  s2   ConstScalar
}

func (obj *VECTOR_JOINT_ITERATOR) Index() int {
  return obj.idx
}

func (obj *VECTOR_JOINT_ITERATOR) Ok() bool {
  return !(obj.s1 == nil || obj.s1.GET_METHOD_NAME() == STORED_TYPE(0)) ||
         !(obj.s2 == nil || obj.s2.GET_METHOD_NAME() == STORED_TYPE(0))
}

func (obj *VECTOR_JOINT_ITERATOR) Next() {
  ok1 := obj.it1.Ok()
  ok2 := obj.it2.Ok()
  obj.s1 = nil
  obj.s2 = nil
  if ok1 {
    obj.idx = obj.it1.Index()
    obj.s1  = obj.it1.GET()
  }
  if ok2 {
    switch {
    case obj.idx >  obj.it2.Index() || !ok1:
      obj.idx = obj.it2.Index()
      obj.s1  = nil
      obj.s2  = obj.it2.GetConst()
    case obj.idx == obj.it2.Index():
      obj.s2  = obj.it2.GetConst()
    }
  }
  if obj.s1 != nil {
    obj.it1.Next()
  }
  if obj.s2 != nil {
    obj.it2.Next()
  } else {
    obj.s2 = CONST_SCALAR_TYPE(0.0)
  }
}

func (obj *VECTOR_JOINT_ITERATOR) Get() (Scalar, ConstScalar) {
  if obj.s1 == nil {
    return nil, obj.s2
  } else {
    return obj.s1, obj.s2
  }
}

func (obj *VECTOR_JOINT_ITERATOR) GetConst() (ConstScalar, ConstScalar) {
  if obj.s1 == nil {
    return nil, obj.s2
  } else {
    return obj.s1, obj.s2
  }
}

func (obj *VECTOR_JOINT_ITERATOR) GET() (SCALAR_TYPE, ConstScalar) {
  return obj.s1, obj.s2
}

func (obj *VECTOR_JOINT_ITERATOR) Clone() *VECTOR_JOINT_ITERATOR {
  r := VECTOR_JOINT_ITERATOR{}
  r.it1 = obj.it1.Clone()
  r.it2 = obj.it2.CloneConstIterator()
  r.idx = obj.idx
  r.s1  = obj.s1
  r.s2  = obj.s2
  return &r
}

func (obj *VECTOR_JOINT_ITERATOR) CloneConstJointIterator() VectorConstJointIterator {
  return obj.Clone()
}

func (obj *VECTOR_JOINT_ITERATOR) CloneJointIterator() VectorJointIterator {
  return obj.Clone()
}

/* joint iterator
 * -------------------------------------------------------------------------- */

type VECTOR_JOINT3_ITERATOR struct {
  it1 *VECTOR_ITERATOR
  it2  VectorConstIterator
  it3  VectorConstIterator
  idx  int
  s1   SCALAR_TYPE
  s2   ConstScalar
  s3   ConstScalar
}

func (obj *VECTOR_JOINT3_ITERATOR) Index() int {
  return obj.idx
}

func (obj *VECTOR_JOINT3_ITERATOR) Ok() bool {
  return !(obj.s1 == nil || obj.s1.GET_METHOD_NAME() == STORED_TYPE(0)) ||
         !(obj.s2 == nil || obj.s2.GET_METHOD_NAME() == STORED_TYPE(0)) ||
         !(obj.s3 == nil || obj.s3.GET_METHOD_NAME() == STORED_TYPE(0))
}

func (obj *VECTOR_JOINT3_ITERATOR) Next() {
  ok1 := obj.it1.Ok()
  ok2 := obj.it2.Ok()
  ok3 := obj.it3.Ok()
  obj.s1 = nil
  obj.s2 = nil
  obj.s3 = nil
  if ok1 {
    obj.idx = obj.it1.Index()
    obj.s1  = obj.it1.GET()
  }
  if ok2 {
    i := obj.it2.Index()
    switch {
    case obj.idx > i || !ok1:
      obj.idx = i
      obj.s1  = nil
      obj.s2  = obj.it2.GetConst()
    case obj.idx == i:
      obj.s2  = obj.it2.GetConst()
    }
  }
  if ok3 {
    i := obj.it3.Index()
    switch {
    case obj.idx > i || (!ok1 && !ok2):
      obj.idx = i
      obj.s1  = nil
      obj.s2  = nil
      obj.s3  = obj.it3.GetConst()
    case obj.idx == i:
      obj.s3  = obj.it3.GetConst()
    }
  }
  if obj.s1 != nil {
    obj.it1.Next()
  }
  if obj.s2 != nil {
    obj.it2.Next()
  } else {
    obj.s2 = CONST_SCALAR_TYPE(0.0)
  }
  if obj.s3 != nil {
    obj.it3.Next()
  } else {
    obj.s3 = CONST_SCALAR_TYPE(0.0)
  }
}

func (obj *VECTOR_JOINT3_ITERATOR) Get() (Scalar, ConstScalar, ConstScalar) {
  if obj.s1 == nil {
    return nil, obj.s2, obj.s3
  } else {
    return obj.s1, obj.s2, obj.s3
  }
}

func (obj *VECTOR_JOINT3_ITERATOR) GET() (SCALAR_TYPE, ConstScalar, ConstScalar) {
  return obj.s1, obj.s2, obj.s3
}

/* joint iterator
 * -------------------------------------------------------------------------- */

type VECTOR_JOINT_ITERATOR_ struct {
  it1 *VECTOR_ITERATOR
  it2 *VECTOR_ITERATOR
  idx  int
  s1   SCALAR_TYPE
  s2   SCALAR_TYPE
}

func (obj *VECTOR_JOINT_ITERATOR_) Index() int {
  return obj.idx
}

func (obj *VECTOR_JOINT_ITERATOR_) Ok() bool {
  return obj.s1 != nil || obj.s2 != nil
}

func (obj *VECTOR_JOINT_ITERATOR_) Next() {
  ok1 := obj.it1.Ok()
  ok2 := obj.it2.Ok()
  obj.s1 = nil
  obj.s2 = nil
  if ok1 {
    obj.idx = obj.it1.Index()
    obj.s1  = obj.it1.GET()
  }
  if ok2 {
    switch {
    case obj.idx >  obj.it2.Index() || !ok1:
      obj.idx = obj.it2.Index()
      obj.s1  = nil
      obj.s2  = obj.it2.GET()
    case obj.idx == obj.it2.Index():
      obj.s2  = obj.it2.GET()
    }
  }
  if obj.s1 != nil {
    obj.it1.Next()
  }
  if obj.s2 != nil {
    obj.it2.Next()
  }
}

func (obj *VECTOR_JOINT_ITERATOR_) GET() (SCALAR_TYPE, SCALAR_TYPE) {
  return obj.s1, obj.s2
}

/* joint iterator
 * -------------------------------------------------------------------------- */

type VECTOR_JOINT3_ITERATOR_ struct {
  it1 *VECTOR_ITERATOR
  it2 *VECTOR_ITERATOR
  it3 *VECTOR_ITERATOR
  idx  int
  s1   SCALAR_TYPE
  s2   SCALAR_TYPE
  s3   SCALAR_TYPE
}

func (obj *VECTOR_JOINT3_ITERATOR_) Index() int {
  return obj.idx
}

func (obj *VECTOR_JOINT3_ITERATOR_) Ok() bool {
  return obj.s1 != nil || obj.s2 != nil || obj.s3 != nil
}

func (obj *VECTOR_JOINT3_ITERATOR_) Next() {
  ok1 := obj.it1.Ok()
  ok2 := obj.it2.Ok()
  ok3 := obj.it3.Ok()
  obj.s1 = nil
  obj.s2 = nil
  obj.s3 = nil
  if ok1 {
    obj.idx = obj.it1.Index()
    obj.s1  = obj.it1.GET()
  }
  if ok2 {
    i := obj.it2.Index()
    switch {
    case obj.idx > i || !ok1:
      obj.idx = i
      obj.s1  = nil
      obj.s2  = obj.it2.GET()
    case obj.idx == i:
      obj.s2  = obj.it2.GET()
    }
  }
  if ok3 {
    i := obj.it3.Index()
    switch {
    case obj.idx > i || (!ok1 && !ok2):
      obj.idx = i
      obj.s1  = nil
      obj.s2  = nil
      obj.s3  = obj.it3.GET()
    case obj.idx == i:
      obj.s3  = obj.it3.GET()
    }
  }
  if obj.s1 != nil {
    obj.it1.Next()
  }
  if obj.s2 != nil {
    obj.it2.Next()
  }
  if obj.s3 != nil {
    obj.it3.Next()
  }
}

func (obj *VECTOR_JOINT3_ITERATOR_) GET() (SCALAR_TYPE, SCALAR_TYPE, SCALAR_TYPE) {
  return obj.s1, obj.s2, obj.s3
}
