/* Copyright (C) 2016 Philipp Benner
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package special

/* -------------------------------------------------------------------------- */

//import "fmt"
import "math"
import "testing"

/* -------------------------------------------------------------------------- */

func TestZetaPolynomialSeries(t *testing.T) {
	r := [][]float64{
		{0.00, 2.13, -1.48052744931466473410e-01},
		{0.31, 2.13, -1.67881354038084545932e-01},
		{0.62, 2.13, -1.85838270984349074322e-01},
		{0.93, 2.13, -2.01883442223505210622e-01},
		{1.24, 2.13, -2.16055445246321281560e-01},
		{1.55, 2.13, -2.28447602151806872239e-01},
		{1.86, 2.13, -2.39188364019243010494e-01},
		{2.17, 2.13, -2.48425851745794373793e-01},
		{2.48, 2.13, -2.56316155628776298769e-01},
		{2.79, 2.13, -2.63014859150268676125e-01},
		{3.10, 2.13, -2.68671214024982563107e-01},
		{3.41, 2.13, -2.73424416446650997425e-01},
		{3.72, 2.13, -2.77401491476801265179e-01},
		{4.03, 2.13, -2.80716364892303060774e-01},
		{4.34, 2.13, -2.83469777330728034404e-01},
		{4.65, 2.13, -2.85749766903213686664e-01},
		{4.96, 2.13, -2.87632509684991100052e-01},
		{5.27, 2.13, -2.89183361055944887497e-01},
		{5.58, 2.13, -2.90457984615608122425e-01},
		{5.89, 2.13, -2.91503490048860780526e-01},
		{6.20, 2.13, -2.92359528001344792791e-01},
		{6.51, 2.13, -2.93059310014911977849e-01},
		{6.82, 2.13, -2.93630536130753461155e-01},
		{7.13, 2.13, -2.94096223035910930843e-01},
		{7.44, 2.13, -2.94475432597143371716e-01},
		{7.75, 2.13, -2.94783905117617206493e-01},
		{8.06, 2.13, -2.95034604330538907657e-01},
		{8.37, 2.13, -2.95238182531336657011e-01},
		{8.68, 2.13, -2.95403374746815217122e-01},
		{8.99, 2.13, -2.95537330746369897305e-01},
		{9.30, 2.13, -2.95645893237431234279e-01},
		{9.61, 2.13, -2.95733829912817935970e-01},
		{9.92, 2.13, -2.95805026241744650761e-01},
		{10.23, 2.13, -2.95862645093146248154e-01},
		{10.54, 2.13, -2.95909258497650817787e-01},
		{10.85, 2.13, -2.95946956121955595531e-01},
		{11.16, 2.13, -2.95977434362208746688e-01},
		{11.47, 2.13, -2.96002069367896636365e-01},
		{11.78, 2.13, -2.96021976785321772052e-01},
		{12.09, 2.13, -2.96038060556952642433e-01},
		{12.40, 2.13, -2.96051052724467578248e-01},
		{12.71, 2.13, -2.96061545852888574615e-01},
		{13.02, 2.13, -2.96070019414126195390e-01},
		{13.33, 2.13, -2.96076861233951993402e-01},
		{13.64, 2.13, -2.96082384910707652192e-01},
		{13.95, 2.13, -2.96086843951307243650e-01},
		{14.26, 2.13, -2.96090443235241640441e-01},
		{14.57, 2.13, -2.96093348305938808274e-01},
		{14.88, 2.13, -2.96095692897138162980e-01},
		{15.19, 2.13, -2.96097585026613263626e-01},
		{15.50, 2.13, -2.96099111927838554159e-01},
		{15.81, 2.13, -2.96100344039689600262e-01},
		{16.12, 2.13, -2.96101338233010158429e-01},
		{16.43, 2.13, -2.96102140419239379110e-01},
		{16.74, 2.13, -2.96102787658889088362e-01},
		{17.05, 2.13, -2.96103309865366315368e-01},
		{17.36, 2.13, -2.96103731181517115800e-01},
		{17.67, 2.13, -2.96104071091553622264e-01},
		{17.98, 2.13, -2.96104345319087414179e-01}}

	for i := 0; i < len(r); i++ {
		epsilon := 1e-14 * math.Pow(10, math.Floor(math.Log10(math.Abs(r[i][2]))))
		value := zeta_polynomial_series(r[i][0], r[i][1])
		target := r[i][2]
		error := math.Abs(value - target)
		if error > epsilon {
			t.Errorf("ZetaPolynomialSeries() failed for `(%f,%f)' with error `%e', value=%e, target=%e\n",
				r[i][0], r[i][1], error, value, target)
		}
	}
}

func TestZetaOddInteger(t *testing.T) {
	r := [][]float64{
		{3, 2.13, 1.20205690315959423664e+00},
		{5, 2.13, 1.03692775514336998910e+00},
		{7, 2.13, 1.00834927738192292601e+00},
		{9, 2.13, 1.00200839282608211711e+00},
		{11, 2.13, 1.00049418860411942767e+00},
		{13, 2.13, 1.00012271334757851804e+00},
		{15, 2.13, 1.00003058823630697205e+00},
		{17, 2.13, 1.00000763719763785531e+00},
		{19, 2.13, 1.00000190821271650599e+00},
		{21, 2.13, 1.00000047693298688145e+00},
		{23, 2.13, 1.00000011921992593145e+00},
		{25, 2.13, 1.00000002980350344295e+00},
		{27, 2.13, 1.00000000745071182529e+00},
		{29, 2.13, 1.00000000186265980417e+00},
		{31, 2.13, 1.00000000046566284162e+00},
		{33, 2.13, 1.00000000011641554387e+00},
		{35, 2.13, 1.00000000002910383046e+00},
		{37, 2.13, 1.00000000000727595761e+00},
		{39, 2.13, 1.00000000000181898940e+00}}

	for i := 0; i < len(r); i++ {
		epsilon := 1e-14 * math.Pow(10, math.Floor(math.Log10(math.Abs(r[i][2]))))
		value := zeta_imp_odd_integer(int(r[i][0]), r[i][1])
		target := r[i][2]
		error := math.Abs(value - target)
		if error > epsilon {
			t.Errorf("ZetaOddInteger() failed for `(%f,%f)' with error `%e', value=%e, target=%e\n",
				r[i][0], r[i][1], error, value, target)
		}
	}
}

func TestZeta(t *testing.T) {
	r := [][]float64{
		{-49.70, -2.90288957841245651075e+23},
		{-49.35, -2.63751408272492101370e+23},
		{-49.00, -1.50017334921539283321e+23},
		{-48.65, -6.21862572945196114248e+22},
		{-48.30, -1.61378241603133421650e+22},
		{-47.95, 1.36270312264820981760e+21},
		{-47.60, 5.00074153510858076979e+21},
		{-47.25, 3.86006716063226789888e+21},
		{-46.90, 2.03178318512741626675e+21},
		{-46.55, 7.72152752550132318208e+20},
		{-46.20, 1.55299854625338753024e+20},
		{-45.85, -5.82162318441372467200e+19},
		{-45.50, -8.77327557988240752640e+19},
		{-45.15, -6.01842325231702999040e+19},
		{-44.80, -2.94440370444924600320e+19},
		{-44.45, -1.00843902898603827200e+19},
		{-44.10, -1.22161792003395635200e+18},
		{-43.75, 1.50706904445238604800e+18},
		{-43.40, 1.61117945136346419200e+18},
		{-43.05, 1.00681581310133158400e+18},
		{-42.70, 4.57612568731280832000e+17},
		{-42.35, 1.36854728132498960000e+17},
		{-42.00, 0.00000000000000000000e+00},
		{-41.65, -3.59012761891060520000e+16},
		{-41.30, -3.14933400335692720000e+16},
		{-40.95, -1.81795339662190280000e+16},
		{-40.60, -7.63397013305935700000e+15},
		{-40.25, -1.87411427061014800000e+15},
		{-39.90, 3.98802564114950375000e+14},
		{-39.55, 8.64481726771422750000e+14},
		{-39.20, 6.63028111879149875000e+14},
		{-38.85, 3.56132306201500312500e+14},
		{-38.50, 1.36480636625888484375e+14},
		{-38.15, 2.38199884046578750000e+13},
		{-37.80, -1.67218890078248750000e+13},
		{-37.45, -2.18919360192762929688e+13},
		{-37.10, -1.51773544249609453125e+13},
		{-36.75, -7.60227977352776757812e+12},
		{-36.40, -2.59852974703320361328e+12},
		{-36.05, -1.86971110790985443115e+11},
		{-35.70, 5.85134463409465209961e+11},
		{-35.35, 5.96378496287036865234e+11},
		{-35.00, 3.80879311252453674316e+11},
		{-34.65, 1.77452822245566436768e+11},
		{-34.30, 5.18092251629068679810e+10},
		{-33.95, -4.92692017499724006653e+09},
		{-33.60, -2.03829493111906852722e+10},
		{-33.25, -1.77557843239955673218e+10},
		{-32.90, -1.05583695692838058472e+10},
		{-32.55, -4.53803270463243961334e+09},
		{-32.20, -1.03337812994879662991e+09},
		{-31.85, 4.39080145804082751274e+08},
		{-31.50, 7.50878449993700981140e+08},
		{-31.15, 5.85200484885673880577e+08},
		{-30.80, 3.25648306090230882168e+08},
		{-30.45, 1.27015246694563195109e+08},
		{-30.10, 1.75441223259612470865e+07},
		{-29.75, -2.47095656778674796224e+07},
		{-29.40, -3.01972875135148242116e+07},
		{-29.05, -2.15989903197161331773e+07},
		{-28.70, -1.12517336964567173272e+07},
		{-28.35, -3.86197751577011495829e+06},
		{-28.00, 0.00000000000000000000e+00},
		{-27.65, 1.34009718596287420951e+06},
		{-27.30, 1.35493480355032579973e+06},
		{-26.95, 9.02810361108706449158e+05},
		{-26.60, 4.38261026462738635018e+05},
		{-26.25, 1.24570629327873044531e+05},
		{-25.90, -3.07395765604875741701e+04},
		{-25.55, -7.73952500157359463628e+04},
		{-25.20, -6.90593915737006318523e+04},
		{-24.85, -4.32279213637224020204e+04},
		{-24.50, -1.93389419883746195410e+04},
		{-24.15, -3.94707758172608419045e+03},
		{-23.80, 3.24618682057182240897e+03},
		{-23.45, 4.98800075557274612947e+03},
		{-23.10, 4.06641658718260305250e+03},
		{-22.75, 2.39978460376699740664e+03},
		{-22.40, 9.68341470799305852779e+02},
		{-22.05, 8.24193127827376628147e+01},
		{-21.70, -3.05750559482647247478e+02},
		{-21.35, -3.70183647162660463437e+02},
		{-21.00, -2.81460144927536248360e+02},
		{-20.65, -1.56466834122033418453e+02},
		{-20.30, -5.46333645279703787878e+01},
		{-19.95, 6.22825715824974590618e+00},
		{-19.60, 3.09638617193280900608e+01},
		{-19.25, 3.24946153456747737209e+01},
		{-18.90, 2.33382836417527137485e+01},
		{-18.55, 1.21475676371439096357e+01},
		{-18.20, 3.35902514941293350859e+00},
		{-17.85, -1.73799184442973975173e+00},
		{-17.50, -3.62975929977457401066e+00},
		{-17.15, -3.46505230870364533402e+00},
		{-16.80, -2.36910203229265814429e+00},
		{-16.45, -1.13892647820573800210e+00},
		{-16.10, -1.94534087689650914132e-01},
		{-15.75, 3.39953303462031786175e-01},
		{-15.40, 5.17281504629239496929e-01},
		{-15.05, 4.62342268787342747238e-01},
		{-14.70, 3.02093419493523807073e-01},
		{-14.35, 1.30557256356687328980e-01},
		{-14.00, 0.00000000000000000000e+00},
		{-13.65, -7.27017949527665185983e-02},
		{-13.30, -9.37145362256250474831e-02},
		{-12.95, -7.99661947377532655867e-02},
		{-12.60, -4.99438328885436766402e-02},
		{-12.25, -1.83528105138390587592e-02},
		{-11.90, 5.88447533879078027441e-03},
		{-11.55, 1.93519249793716145713e-02},
		{-11.20, 2.26781697130416237673e-02},
		{-10.85, 1.87501905884624522902e-02},
		{-10.50, 1.11461224739428134412e-02},
		{-10.15, 3.04180760198873804262e-03},
		{-9.80, -3.36698204510195702593e-03},
		{-9.45, -7.01120852785504840993e-03},
		{-9.10, -7.80223004059716913200e-03},
		{-8.75, -6.33327111930014063912e-03},
		{-8.40, -3.54343080176749069751e-03},
		{-8.05, -4.21749259931573406996e-04},
		{-7.70, 2.20766114904363602509e-03},
		{-7.35, 3.80780531864653758525e-03},
		{-7.00, 4.16666666666666660884e-03},
		{-6.65, 3.37001154706995662350e-03},
		{-6.30, 1.73206936570064178732e-03},
		{-5.95, -2.94317186108599554428e-04},
		{-5.60, -2.21067843185643320147e-03},
		{-5.25, -3.55700393353104845837e-03},
		{-4.90, -3.98022702518858149945e-03},
		{-4.55, -3.28504674044202953781e-03},
		{-4.20, -1.46872093050569784908e-03},
		{-3.85, 1.25571021307434478598e-03},
		{-3.50, 4.44101133547943234536e-03},
		{-3.15, 7.38299577253397412702e-03},
		{-2.80, 9.08072948568524988822e-03},
		{-2.45, 8.16036478853301300296e-03},
		{-2.10, 2.72949978462500974369e-03},
		{-1.75, -9.90137762367054689860e-03},
		{-1.40, -3.37649876940475865417e-02},
		{-1.05, -7.53672521689155577862e-02},
		{-0.70, -1.46237191725908072248e-01},
		{-0.35, -2.69466102876042334913e-01},
		{0.00, -5.00000000000000000000e-01},
		{0.35, -1.01051122443759133773e+00},
		{0.70, -2.77838844555369535172e+00},
		{1.05, 2.05808443020369864485e+01},
		{1.40, 3.10554727797758101104e+00},
		{1.75, 1.96232009945134189266e+00},
		{2.10, 1.56021653350336197974e+00},
		{2.45, 1.36160734863335664002e+00},
		{2.80, 1.24703142231725339073e+00},
		{3.15, 1.17483945199486572442e+00},
		{3.50, 1.12673386731705660324e+00},
		{3.85, 1.09343488672824240560e+00},
		{4.20, 1.06975147723380947795e+00},
		{4.55, 1.05256680717747874709e+00},
		{4.90, 1.03990754404935614730e+00},
		{5.25, 1.03047239837102799775e+00},
		{5.60, 1.02337547922702998271e+00},
		{5.95, 1.01799826808954185786e+00},
		{6.30, 1.01390009746280784775e+00},
		{6.65, 1.01076183674763386833e+00},
		{7.00, 1.00834927738192292601e+00},
		{7.35, 1.00648865272283294381e+00},
		{7.70, 1.00504987929596500962e+00},
		{8.05, 1.00393485105196655915e+00},
		{8.40, 1.00306912203744480472e+00},
		{8.75, 1.00239590997072958167e+00},
		{9.10, 1.00187171915112749332e+00},
		{9.45, 1.00146311148815159164e+00},
		{9.80, 1.00114430298402945496e+00},
		{10.15, 1.00089536090061992368e+00},
		{10.50, 1.00070084264173608801e+00},
		{10.85, 1.00054876240093615358e+00},
		{11.20, 1.00042980292399419362e+00},
		{11.55, 1.00033671181206029743e+00},
		{11.90, 1.00026383756620096399e+00},
		{12.25, 1.00020677197676133297e+00},
		{12.60, 1.00016207378874599776e+00},
		{12.95, 1.00012705471223561915e+00},
		{13.30, 1.00009961340720754386e+00},
		{13.65, 1.00007810648461781255e+00},
		{14.00, 1.00006124813505881122e+00},
		{14.35, 1.00004803194160740709e+00},
		{14.70, 1.00003766991323939095e+00},
		{15.05, 1.00002954490549189615e+00},
		{15.40, 1.00002317346156166522e+00},
		{15.75, 1.00001817677335602674e+00},
		{16.10, 1.00001425797582954580e+00},
		{16.45, 1.00001118438504899011e+00},
		{16.80, 1.00000877359800122157e+00},
		{17.15, 1.00000688261076087215e+00},
		{17.50, 1.00000539929705123399e+00},
		{17.85, 1.00000423573348040662e+00},
		{18.20, 1.00000332297009530969e+00},
		{18.55, 1.00000260693250653254e+00},
		{18.90, 1.00000204521019409043e+00},
		{19.25, 1.00000160453899278323e+00},
		{19.60, 1.00000125882747381567e+00},
		{19.95, 1.00000098760954680976e+00},
		{20.30, 1.00000077483112659316e+00},
		{20.65, 1.00000060789866607180e+00},
		{21.00, 1.00000047693298688145e+00},
		{21.35, 1.00000037418407483614e+00},
		{21.70, 1.00000029357209507808e+00},
		{22.05, 1.00000023032738361017e+00},
		{22.40, 1.00000018070806251380e+00},
		{22.75, 1.00000014177853513431e+00},
		{23.10, 1.00000011123572951632e+00},
		{23.45, 1.00000008727279454668e+00},
		{23.80, 1.00000006847217282058e+00},
		{24.15, 1.00000005372171929530e+00},
		{24.50, 1.00000004214889459675e+00},
		{24.85, 1.00000003306913987089e+00},
		{25.20, 1.00000002594537673595e+00},
		{25.55, 1.00000002035623136720e+00},
		{25.90, 1.00000001597110843576e+00},
		{26.25, 1.00000001253063208750e+00},
		{26.60, 1.00000000983130354903e+00},
		{26.95, 1.00000000771346342354e+00},
		{27.30, 1.00000000605184635738e+00},
		{27.65, 1.00000000474817252183e+00},
		{28.00, 1.00000000372533404125e+00},
		{28.35, 1.00000000292283330872e+00},
		{28.70, 1.00000000229320540335e+00},
		{29.05, 1.00000000179921033627e+00},
		{29.40, 1.00000000141163036815e+00},
		{29.75, 1.00000000110754183602e+00},
		{30.10, 1.00000000086895912688e+00},
		{30.45, 1.00000000068177108403e+00},
		{30.80, 1.00000000053490634144e+00},
		{31.15, 1.00000000041967873621e+00},
		{31.50, 1.00000000032927327531e+00},
		{31.85, 1.00000000025834245854e+00},
		{32.20, 1.00000000020269119716e+00},
		{32.55, 1.00000000015902834605e+00},
		{32.90, 1.00000000012477108235e+00},
		{33.25, 1.00000000009789347111e+00},
		{33.60, 1.00000000007680567293e+00},
		{33.95, 1.00000000006026046329e+00},
		{34.30, 1.00000000004727929159e+00},
		{34.65, 1.00000000003709454965e+00},
		{35.00, 1.00000000002910383046e+00},
		{35.35, 1.00000000002283440104e+00},
		{35.70, 1.00000000001791544690e+00},
		{36.05, 1.00000000001405631167e+00},
		{36.40, 1.00000000001102828939e+00},
		{36.75, 1.00000000000865263416e+00},
		{37.10, 1.00000000000678879175e+00},
		{37.45, 1.00000000000532640598e+00},
		{37.80, 1.00000000000417887946e+00},
		{38.15, 1.00000000000327871064e+00},
		{38.50, 1.00000000000257238675e+00},
		{38.85, 1.00000000000201838546e+00},
		{39.20, 1.00000000000158362212e+00},
		{39.55, 1.00000000000124233956e+00},
		{39.90, 1.00000000000097477582e+00},
		{40.25, 1.00000000000076472162e+00},
		{40.60, 1.00000000000059996452e+00},
		{40.95, 1.00000000000047073456e+00},
		{41.30, 1.00000000000036926018e+00},
		{41.65, 1.00000000000028976821e+00},
		{42.00, 1.00000000000022737368e+00},
		{42.35, 1.00000000000017830182e+00},
		{42.70, 1.00000000000013988810e+00},
		{43.05, 1.00000000000010991208e+00},
		{43.40, 1.00000000000008615331e+00},
		{43.75, 1.00000000000006750156e+00},
		{44.10, 1.00000000000005306866e+00},
		{44.45, 1.00000000000004152234e+00},
		{44.80, 1.00000000000003264056e+00},
		{45.15, 1.00000000000002553513e+00},
		{45.50, 1.00000000000002020606e+00},
		{45.85, 1.00000000000001576517e+00},
		{46.20, 1.00000000000001243450e+00},
		{46.55, 1.00000000000000976996e+00},
		{46.90, 1.00000000000000754952e+00},
		{47.25, 1.00000000000000599520e+00},
		{47.60, 1.00000000000000466294e+00},
		{47.95, 1.00000000000000377476e+00},
		{48.30, 1.00000000000000288658e+00},
		{48.65, 1.00000000000000222045e+00},
		{49.00, 1.00000000000000177636e+00},
		{49.35, 1.00000000000000133227e+00},
		{49.70, 1.00000000000000111022e+00}}

	for i := 0; i < len(r); i++ {
		epsilon := math.Pow(10, math.Floor(math.Log10(math.Abs(r[i][1]))))
		if r[i][0] >= 0.0 {
			epsilon = epsilon * 1e-14
		} else {
			epsilon = epsilon * 1e-12
		}
		value := Zeta(r[i][0])
		target := r[i][1]
		error := math.Abs(value - target)
		if error > epsilon {
			t.Errorf("Zeta() failed for `%f' with error `%e', value=%e, target=%e\n",
				r[i][0], error, value, target)
		}
	}
}

func TestZetaErrors(t *testing.T) {
	if !math.IsNaN(Zeta(1.0)) {
		t.Error("TestZetaErrors() failed!")
	}
	if !math.IsInf(Zeta(-299.99), +1) {
		t.Error("TestZetaErrors() failed!")
	}
	if !math.IsInf(Zeta(-300.01), -1) {
		t.Error("TestZetaErrors() failed!")
	}
}
