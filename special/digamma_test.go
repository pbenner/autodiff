/* Copyright (C) 2016 Philipp Benner
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package special

/* -------------------------------------------------------------------------- */

//import "fmt"
import "math"
import "testing"

/* -------------------------------------------------------------------------- */

func TestPolynomial(t *testing.T) {
	P := NewPolynomial([]float64{
		0.25479851061131551526977464225335883769,
		-0.18684290534374944114622235683619897417,
		-0.80360876047931768958995775910991929922,
		-0.67227342794829064330498117008564270136,
		-0.26569010991230617151285010695543858005,
		-0.05775672694575986971640757748003553385,
		-0.0071432147823164975485922555833274240665,
		-0.00048740753910766168912364555706064993274,
		-0.16454996865214115723416538844975174761e-4,
		-0.20327832297631728077731148515093164955e-6})

	r := P.Eval(28)

	if math.Abs(r - -1.95586e+07) > 100 {
		t.Error("TestPolynomial failed!")
	}
}

func TestDigamma(t *testing.T) {
	r := [][]float64{
		{0.5, -1.963510026021423549},
		{1.0, -0.57721566490153286555},
		{1.5, 0.036489973978576520364},
		{2.0, 0.42278433509846713445},
		{2.5, 0.70315664064524319166},
		{3.0, 0.92278433509846713445},
		{3.5, 1.1031566406452431028},
		{4.0, 1.2561176684318005048},
		{4.5, 1.3888709263595289123},
		{5.0, 1.5061176684318005048},
		{5.5, 1.6110931485817512332},
		{6.0, 1.7061176684318004604},
		{6.5, 1.7929113303999328899},
		{7.0, 1.8727843350984672011},
		{7.5, 1.9467574842460868556},
		{8.0, 2.0156414779556097727},
		{8.5, 2.0800908175794199373},
		{9.0, 2.1406414779556097727},
		{9.5, 2.1977378764029493752},
		{10.0, 2.2517525890667209332},
		{10.5, 2.3030010342976865445},
		{11.0, 2.351752589066721022},
		{11.5, 2.3982391295357814442},
		{12.0, 2.4426616799758118503},
		{12.5, 2.4851956512749122652},
		{13.0, 2.5259950133091453317},
		{13.5, 2.5651956512749118922},
		{14.0, 2.6029180902322224256},
		{14.5, 2.6392697253489862952},
		{15.0, 2.6743466616607936004},
		{15.5, 2.7082352425903652993},
		{16.0, 2.7410133283274604743},
		{16.5, 2.7727513716226233065},
		{17.0, 2.8035133283274604743},
		{17.5, 2.8333574322286843028},
		{18.0, 2.8623368577392249712},
		{18.5, 2.8905002893715412426},
		{19.0, 2.9178924132947807735},
		{19.5, 2.9445543434255951887},
		{20.0, 2.970523992242148914},
		{20.5, 2.9958363947076467326},
		{21.0, 3.0205239922421491805},
		{21.5, 3.0446168825125248247},
		{22.0, 3.0681430398611966304},
		{22.5, 3.0911285104195012075},
		{23.0, 3.1135975853157420445},
		{23.5, 3.1355729548639459381},
		{24.0, 3.157075846185307455},
		{24.5, 3.1781261463533074796},
		{25.0, 3.1987425128519739737},
		{25.5, 3.2189424728839197698},
		{26.0, 3.2387425128519740092},
		{26.5, 3.2581581591584294344},
		{27.0, 3.2772040513135123341},
		{27.5, 3.2958940082150331996},
		{28.0, 3.3142410883505495356},
		{28.5, 3.3322576445786697974},
		{29.0, 3.349955374064835123},
		{29.5, 3.3673453638769155205},
		{30.0, 3.3844381326855250691},
		{30.5, 3.4012436689616611929},
		{31.0, 3.417771466018858284},
		{31.5, 3.4340305542075628686},
		{32.0, 3.4500295305349872876},
		{32.5, 3.4657765859535945019},
		{33.0, 3.4812795305349872876},
		{33.5, 3.4965458167228251618},
		{34.0, 3.5115825608380175638},
		{34.5, 3.5263965629914819644},
		{35.0, 3.5409943255438998122},
		{35.5, 3.5553820702378589047},
		{36.0, 3.5695657541153282821},
		{36.5, 3.5835510843223659094},
		{37.0, 3.5973435318931064053},
		{37.5, 3.6109483445963386217},
		{38.0, 3.6243705589201331563},
		{38.5, 3.637615011263005016},
		{39.0, 3.6506863483938176707},
		{39.5, 3.6635890372370312207}}

	for i := 0; i < len(r); i++ {
		if math.Abs(Digamma(r[i][0])-r[i][1]) > 1e-8 {
			t.Errorf("Digamma() failed for `%f'\n", r[i][0])
		}
	}
}
